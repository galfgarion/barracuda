#include "matrix4x4.h"
#include <string>
#include <sstream>

using namespace std;

Matrix4x4::Matrix4x4() {
   for(int i=0; i < 4; i++) {
      for(int j=0; j < 4; j++) {
         m[i][j] = 0;
      }
   }
}

Matrix4x4::Matrix4x4(double A[4][4]) {
   for(int i=0; i < 4; i++) {
      for(int j=0; j < 4; j++) {
         m[i][j] = A[i][j];
      }
   }
}

const char * Matrix4x4::c_str() {
   ostringstream o;
   o << "{";
      for(int i=0; i < 4; i++) {
         o << "{";
         for(int j=0; j < 4; j++) {
            o << m[i][j];
            if(j < 3) {
               o << " ";
            }
         }
         o << "}";
      }
   o << "}";
   return o.str().c_str();
}

double Matrix4x4::determinant() {
   return m[1][1]*m[2][2]*m[3][3]*m[4][4] + m[1][1]*m[2][3]*m[3][4]*m[4][2]
        + m[1][1]*m[2][4]*m[3][2]*m[4][3] + m[1][2]*m[2][1]*m[3][4]*m[4][3]
        + m[1][2]*m[2][3]*m[3][1]*m[4][4] + m[1][2]*m[2][4]*m[3][3]*m[4][1]
        + m[1][3]*m[2][1]*m[3][2]*m[4][4] + m[1][3]*m[2][2]*m[3][4]*m[4][1]
        + m[1][3]*m[2][4]*m[3][1]*m[4][2] + m[1][4]*m[2][1]*m[3][3]*m[4][2]
        + m[1][4]*m[2][2]*m[3][1]*m[4][3] + m[1][4]*m[2][3]*m[3][2]*m[4][1]
        - m[1][1]*m[2][2]*m[3][4]*m[4][3] - m[1][1]*m[2][3]*m[3][2]*m[4][4]
        - m[1][1]*m[2][4]*m[3][3]*m[4][2] - m[1][2]*m[2][1]*m[3][3]*m[4][4]
        - m[1][2]*m[2][3]*m[3][4]*m[4][1] - m[1][2]*m[2][4]*m[3][1]*m[4][3]
        - m[1][3]*m[2][1]*m[3][4]*m[4][2] - m[1][3]*m[2][2]*m[3][1]*m[4][4]
        - m[1][3]*m[2][4]*m[3][2]*m[4][1] - m[1][4]*m[2][1]*m[3][2]*m[4][3]
        - m[1][4]*m[2][2]*m[3][3]*m[4][1] - m[1][4]*m[2][3]*m[3][1]*m[4][2]
        ;
}

Matrix4x4 Matrix4x4::inverse() {
   double b [4][4];
   b[1][1] = m[2][2]*m[3][3]*m[4][4] + m[2][3]*m[3][4]*m[4][2] + m[2][4]*m[3][2]*m[4][3] - m[2][2]*m[3][4]*m[4][3] - m[2][3]*m[3][2]*m[4][4] - m[2][4]*m[3][3]*m[4][2];

   b[1][2] = m[1][2]*m[3][4]*m[4][3] + m[1][3]*m[3][2]*m[4][4] + m[1][4]*m[3][3]*m[4][2] - m[1][2]*m[3][3]*m[4][4] - m[1][3]*m[3][4]*m[4][2] - m[1][4]*m[3][2]*m[4][3];
 
   b[1][3] = m[1][2]*m[2][3]*m[4][4] + m[1][3]*m[2][4]*m[4][2] + m[1][4]*m[2][2]*m[4][3] - m[1][2]*m[2][4]*m[4][3] - m[1][3]*m[2][2]*m[4][4] - m[1][4]*m[2][3]*m[4][2];

   b[1][4] = m[1][2]*m[2][4]*m[3][3] + m[1][3]*m[2][2]*m[3][4] + m[1][4]*m[2][3]*m[3][2] - m[1][2]*m[2][3]*m[3][4] - m[1][3]*m[2][4]*m[3][2] - m[1][4]*m[2][2]*m[3][3];

   b[2][1] = m[2][1]*m[3][4]*m[4][3] + m[2][3]*m[3][1]*m[4][4] + m[2][4]*m[3][3]*m[4][1] - m[2][1]*m[3][3]*m[4][4] - m[2][3]*m[3][4]*m[4][1] - m[2][4]*m[3][1]*m[4][3];

   b[2][2] = m[1][1]*m[3][3]*m[4][4] + m[1][3]*m[3][4]*m[4][1] + m[1][4]*m[3][1]*m[4][3] - m[1][1]*m[3][4]*m[4][3] - m[1][3]*m[3][1]*m[4][4] - m[1][4]*m[3][3]*m[4][1];

   b[2][3] = m[1][1]*m[2][4]*m[4][3] + m[1][3]*m[2][1]*m[4][4] + m[1][4]*m[2][3]*m[4][1] - m[1][1]*m[2][3]*m[4][4] - m[1][3]*m[2][4]*m[4][1] - m[1][4]*m[2][1]*m[4][3];

   b[2][4] = m[1][1]*m[2][3]*m[3][4] + m[1][3]*m[2][4]*m[3][1] + m[1][4]*m[2][1]*m[3][3] - m[1][1]*m[2][4]*m[3][3] - m[1][3]*m[2][1]*m[3][4] - m[1][4]*m[2][3]*m[3][1];

   b[3][1] = m[2][1]*m[3][2]*m[4][4] + m[2][2]*m[3][4]*m[4][1] + m[2][4]*m[3][1]*m[4][2] - m[2][1]*m[3][4]*m[4][2] - m[2][2]*m[3][1]*m[4][4] - m[2][4]*m[3][2]*m[4][1];

   b[3][2] = m[1][1]*m[3][4]*m[4][2] + m[1][2]*m[3][1]*m[4][4] + m[1][4]*m[3][2]*m[4][1] - m[1][1]*m[3][2]*m[4][4] - m[1][2]*m[3][4]*m[4][1] - m[1][4]*m[3][1]*m[4][2];

   b[3][3] = m[1][1]*m[2][2]*m[4][4] + m[1][2]*m[2][4]*m[4][1] + m[1][4]*m[2][1]*m[4][2] - m[1][1]*m[2][4]*m[4][2] - m[1][2]*m[2][1]*m[4][4] - m[1][4]*m[2][2]*m[4][1];

   b[3][4] = m[1][1]*m[2][4]*m[3][2] + m[1][2]*m[2][1]*m[3][4] + m[1][4]*m[2][2]*m[3][1] - m[1][1]*m[2][2]*m[3][4] - m[1][2]*m[2][4]*m[3][1] - m[1][4]*m[2][1]*m[3][2];

   b[4][1] = m[2][1]*m[3][3]*m[4][2] + m[2][2]*m[3][1]*m[4][3] + m[2][3]*m[3][2]*m[4][1] - m[2][1]*m[3][2]*m[4][3] - m[2][2]*m[3][3]*m[4][1] - m[2][3]*m[3][1]*m[4][2];

   b[4][2] = m[1][1]*m[3][2]*m[4][3] + m[1][2]*m[3][3]*m[4][1] + m[1][3]*m[3][1]*m[4][2] - m[1][1]*m[3][3]*m[4][2] - m[1][2]*m[3][1]*m[4][3] - m[1][3]*m[3][2]*m[4][1];

   b[4][3] = m[1][1]*m[2][3]*m[4][2] + m[1][2]*m[2][1]*m[4][3] + m[1][3]*m[2][2]*m[4][1] - m[1][1]*m[2][2]*m[4][3] - m[1][2]*m[2][3]*m[4][1] - m[1][3]*m[2][1]*m[4][2];

   b[4][4] = m[1][1]*m[2][2]*m[3][3] + m[1][2]*m[2][3]*m[3][1] + m[1][3]*m[2][1]*m[3][2] - m[1][1]*m[2][3]*m[3][2] - m[1][2]*m[2][1]*m[3][3] - m[1][3]*m[2][2]*m[3][1];
}

// -------------------------------------------
// operator overloads

Matrix4x4& operator*=(Matrix4x4& A, double r) {
   for(int i=0; i < 4; i++) {
      for(int j=0; j < 4; j++) {
         A.m[i][j] *= r;
      }
   }
}

Matrix4x4& operator+=(Matrix4x4& A, const Matrix4x4& B) {
   for(int i=0; i < 4; i++) {
      for(int j=0; j < 4; j++) {
         A.m[i][j] += B.m[i][j];
      }
   }
   return A;
}

Matrix4x4 operator+(const Matrix4x4& A, const Matrix4x4& B) {
   Matrix4x4 result = Matrix4x4(A);
   result += B;
   return result;
}

Matrix4x4 operator*(const Matrix4x4& A, double r) {
   Matrix4x4 result = Matrix4x4(A);
   result *= r;
   return result;
}

Matrix4x4 operator*(const double r, const Matrix4x4& A) {
   return A * r;
}

// dot the ith row of A with the jth column of B
Matrix4x4 operator * (const Matrix4x4& A, const Matrix4x4& B) {
   Matrix4x4 result = Matrix4x4();
   for(int i=0; i < 4; i++) {
      for(int j=0; j < 4; j++) {
         result.m[i][j] = 
              A.m[i][0] * B.m[0][j]
            + A.m[i][1] * B.m[1][j]
            + A.m[i][2] * B.m[2][j]
            + A.m[i][3] * B.m[3][j];
      }
   }

   return result;
}
